/**
 * @author janak
 * @method updateStatus
 */

 'use strict';

 const { getCorporateFormDetail, corporateFormUpdateStatus } = require('../utils/corporate_form_db_query.helper');
 const { getGeneralFormDetail, generalFormUpdateStatus } = require('../utils/general_form_db_query.helper');
 const { generateHashPassword, generateSalt } = require('../../../helpers/bcrypt');
 const { insert,getUserInfoByUsername } = require('../../../../lib/modules/user-auth/utils/mongo_query.helper');
 const emailHelper = require('../../../helpers/email.helper');

 const HTTPStatus = require('http-status');

 const internalFun = {
  getAutoGeneratedPassword : async(uuid) => {
    try {
      let genPass = "";

      for (let i = 0, n = uuid.length; i < length; ++i) {
        genPass += uuid.charAt(Math.floor(Math.random() * n));
        }

      return genPass;
            
    } catch (error) {
        throw error;
    }
},
  registerUser : async(req,email,username) => {
      try {
      
        const salt = await generateSalt();
        // const autoPass = await internalFun.getAutoGeneratedPassword(req.params.uuid)
        const passwordAlgorithm = process.env.USER_PASSWORD+"HeLOJanak" // TODO:


        // email and passwordAlgorithm send view email to user
        const message = {
          email: email,
          title : 'Your Login Credentials',
          body: `<tr>
          <td valign="middle" style="padding:0 1.5em">
              <div>
                  <p><b>Dear ${username}, </b></p>
                  <p>
                  Please use this Credentials for login our system.</p>
                    <p> Your username is : ${email}</p>
                    <p> Your password is : ${passwordAlgorithm}</p>
                  </div>
                </td>
            </tr>`
        }

        await emailHelper.sendMail(message)

        const hashPassword = await generateHashPassword(passwordAlgorithm, salt);
        const insertIntoUserRes = await insert(req,email, hashPassword);
        if(insertIntoUserRes){
          return true;
        }
        return false;
              
      } catch (error) {
          return false
      }
  },
 }
 
 module.exports = async (req, res, next) => {
   try {
 
     if (req.params.uuid) {
 
       let projection = {}


       let data = {}
       let updateResponse = null
       let registerUersRes = null

       if (req?.query?.formType==='general'){
          projection = {
              uuid: 1,
              personalInformation : 1
            }

          const data = await getGeneralFormDetail(req, req.params.uuid, projection)
          const email = data?.personalInformation?.email
          const username = data?.personalInformation?.name


          const checkUser = await getUserInfoByUsername(req,email)
          if (checkUser &&  Object.keys(checkUser).length > 0) {
            return res.status(HTTPStatus.NOT_FOUND).json({
              status: HTTPStatus.NOT_FOUND,
              message: "User Already Regitered"
            })

          }
          
          registerUersRes = await internalFun.registerUser(req,email,username)
          
          if (data && registerUersRes &&  Object.keys(data).length > 0) {
 
            updateResponse = await generalFormUpdateStatus(req, req.params.uuid);
            if (updateResponse) {
              return res.status(HTTPStatus.OK).json({
                status: HTTPStatus.OK,
                message: "Update success."
              })
            }
    
            return res.status(HTTPStatus.BAD_REQUEST).json({
              status: HTTPStatus.BAD_REQUEST,
              message: "Update fail."
            })
    
          }
       }
       projection = {
        uuid: 1,
        organizationalInformation : 1
      }

       data = await getCorporateFormDetail(req, req.params.uuid, projection)
       const email = data?.organizationalInformation?.email
       const username = data?.organizationalInformation?.organizatioName

       const checkUser = await getUserInfoByUsername(req,email,username)
        if (checkUser &&  Object.keys(checkUser).length > 0) {
          return res.status(HTTPStatus.NOT_FOUND).json({
            status: HTTPStatus.NOT_FOUND,
            message: "User Already Regitered"
          })

          }
          
       registerUersRes = await internalFun.registerUser(req, email)

       if (data && registerUersRes && Object.keys(data).length > 0) {

         updateResponse = await corporateFormUpdateStatus(req, req.params.uuid);
         if (updateResponse) {
           return res.status(HTTPStatus.OK).json({
             status: HTTPStatus.OK,
             message: "Update success."
           })
         }
 
         return res.status(HTTPStatus.BAD_REQUEST).json({
           status: HTTPStatus.BAD_REQUEST,
           message: "Update fail."
         })
 
       }


     }
 
     return res.status(HTTPStatus.NOT_FOUND).json({
       status: HTTPStatus.NOT_FOUND,
       message: "Data not found."
     })
   } catch (error) {
     return next(error);
   }
 }